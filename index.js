const themeToggle = document.getElementById('theme-btn');
const body = document.body;
const head = document.getElementById('head');

function applyDarkTheme() {
    if (head) head.style.backgroundColor = "#0f1949ff";
}

function applyLightTheme() {
    if (head) head.style.backgroundColor = "rgba(241, 241, 241)";
}

function applyTheme(theme) {
    if (theme === 'dark') {
        body.classList.add('dark-theme');
        themeToggle.textContent = '‚òÄÔ∏è';
        applyDarkTheme();

      document.querySelectorAll('#textwhite, .nav-link, #magik, .section-header h2').forEach(el => {
    el.style.color = 'white';
});

    } else {
        body.classList.remove('dark-theme');
        themeToggle.textContent = 'üåô';
        applyLightTheme();

      document.querySelectorAll('#textwhite, .nav-link, #magik, .section-header h2').forEach(el => {
    el.style.color = 'black';
});

    }

    localStorage.setItem('theme', theme);
}

themeToggle.addEventListener('click', () => {
    const currentTheme = localStorage.getItem('theme') || 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    applyTheme(newTheme);
});

const savedTheme = localStorage.getItem('theme') || 'light';
applyTheme(savedTheme);

const header = document.getElementById("head");
const magicLink = document.getElementById("magik");
const clickText = document.querySelector('.click-text');
const crestImg = document.querySelector('.crest-img');
const spotifyWidget = document.querySelector('.spotify-widget');
const text1 = document.querySelector('.text1');
let isExpanded = false;

spotifyWidget.style.display = 'none';

magicLink.addEventListener("mouseenter", () => {
    header.style.height = "330px";
    isExpanded = true;
    text2.style.display = "none"
});

header.addEventListener("mouseleave", () => {
    header.style.height = "90px";
    isExpanded = false;
    text1.style.opacity = '1';
    text1.style.display = 'flex';
    spotifyWidget.style.display = 'none';
    spotifyWidget.style.opacity = '0';
});

function toggleMusicWidget() {
    if (!isExpanded) return;
    
    text1.style.transition = 'opacity 0.5s ease';
    text1.style.opacity = '0';
    
    setTimeout(() => {
        text1.style.display = 'none';
        spotifyWidget.style.display = 'block';
        setTimeout(() => {
            spotifyWidget.style.transition = 'opacity 0.5s ease';
            spotifyWidget.style.opacity = '1';
        }, 50);
    }, 200);
}

crestImg.addEventListener('click', toggleMusicWidget);
clickText.addEventListener('click', toggleMusicWidget);

const letters = document.querySelectorAll('.letter');
const container = document.querySelector('.floating-letters');

const style = document.createElement('style');
style.textContent = `
    @keyframes letterTilt {
        0%, 100% { transform: rotate(0deg) translateY(0); }
        25% { transform: rotate(-15deg) translateY(-10px); }
        50% { transform: rotate(15deg) translateY(-5px); }
        75% { transform: rotate(-5deg) translateY(-7px); }
    }
    @keyframes letterFly {
        0% { transform: rotate(0deg) scale(1); }
        50% { transform: rotate(180deg) scale(1.2); }
        100% { transform: rotate(360deg) scale(1); }
    }
    @keyframes letterFloat {
        0%, 100% { transform: translateY(0) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(5deg); }
    }
`;
document.head.appendChild(style);

letters.forEach(letter => {
    let isAnimating = false;
    
    letter.style.opacity = '0';
    letter.style.transform = 'translateY(50px) rotate(10deg)';
    
    setTimeout(() => {
        letter.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
        letter.style.opacity = '1';
        letter.style.transform = 'translateY(0) rotate(0deg)';
        
        setTimeout(() => {
            letter.style.animation = 'letterFloat 6s infinite ease-in-out';
        }, 800);
    }, Math.random() * 1500);
    
    const handleMouseEnter = () => {
        if (isAnimating) return;
        letter.style.animation = 'letterTilt 2s infinite';
    };
    
    const handleMouseLeave = () => {
        if (isAnimating) return;
        letter.style.animation = 'letterFloat 6s infinite ease-in-out';
    };
    
    const handleClick = () => {
        if (isAnimating) return;
        isAnimating = true;
        
        letter.style.animation = 'letterFly 1s forwards';
        letter.style.transition = '';
        
        setTimeout(() => {
            const containerRect = container.getBoundingClientRect();
            const minTop = 300;
            const maxTop = containerRect.height - letter.clientHeight;
            const randomLeft = Math.random() * (containerRect.width - letter.clientWidth);
            const randomTop = minTop + Math.random() * (maxTop - minTop);
            
            letter.style.animation = '';
            letter.style.transition = 'left 1.5s ease-out, top 1.5s ease-out';
            letter.style.left = `${randomLeft}px`;
            letter.style.top = `${randomTop}px`;
            
            setTimeout(() => {
                isAnimating = false;
                letter.style.animation = 'letterFloat 5s infinite ease-in-out';
                letter.addEventListener('mouseenter', handleMouseEnter);
                letter.addEventListener('mouseleave', handleMouseLeave);
            }, 2000);
            
        }, 1000);
        
        letter.removeEventListener('mouseenter', handleMouseEnter);
        letter.removeEventListener('mouseleave', handleMouseLeave);
    };
    
    letter.addEventListener('click', handleMouseEnter);
    letter.addEventListener('mouseleave', handleMouseLeave);
    letter.addEventListener('mouseenter', handleClick);
});

const characterCards = document.querySelectorAll('.character-card');
characterCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
        const house = this.getAttribute('data-house');
        let color;
        
        switch(house) {
            case 'gryffindor': color = 'rgba(116, 0, 1, 0.2)'; break;
            case 'slytherin': color = 'rgba(26, 71, 42, 0.2)'; break;
            case 'ravenclaw': color = 'rgba(14, 26, 64, 0.2)'; break;
            case 'hufflepuff': color = 'rgba(236, 185, 57, 0.2)'; break;
            default: color = 'rgba(148, 107, 45, 0.2)';
        }
        
        this.style.boxShadow = `0 0 20px ${color}`;
    });
    
    card.addEventListener('mouseleave', function() {
        this.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.3)';
    });
});

const modals = {
    'harry': document.getElementById('harry-modal'),
    'hermione': document.getElementById('hermione-modal'),
    'ron': document.getElementById('ron-modal'),
    'voldemort': document.getElementById('voldemort-modal')
};

function showModal(character) {
    const modal = modals[character];
    if (modal) {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
        setTimeout(() => {
            modal.querySelector('.modal-content').style.transform = 'translateY(0)';
        }, 10);
    }
}

function closeModal(modal) {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
}

document.querySelectorAll('.more-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
        e.stopPropagation();
        const character = this.getAttribute('data-character');
        showModal(character);
    });
});

document.querySelectorAll('.close-modal, .modal-close-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const modal = this.closest('.character-modal');
        closeModal(modal);
    });
});

window.addEventListener('click', function(e) {
    if (e.target.classList.contains('character-modal')) {
        closeModal(e.target);
    }
});

document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        Object.values(modals).forEach(modal => {
            if (modal.style.display === 'block') {
                closeModal(modal);
            }
        });
    }
});

const exploreBtn = document.getElementById('explore-btn');
if (exploreBtn) {
    exploreBtn.addEventListener('mouseenter', function() {
        this.innerHTML = '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ <i class="fas fa-magic fa-spin"></i>';
    });
    
    exploreBtn.addEventListener('mouseleave', function() {
        this.innerHTML = '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ <i class="fas fa-magic"></i>';
    });
    
    exploreBtn.addEventListener('click', function() {
        document.getElementById('characters').scrollIntoView({
            behavior: 'smooth'
        });
    });
}

function initSparks() {
    const sparksContainer = document.querySelector('.sparks');
    if (!sparksContainer) return;
    
    for (let i = 0; i < 15; i++) {
        const spark = document.createElement('div');
        spark.className = 'spark';
        spark.style.left = `${Math.random() * 100}%`;
        spark.style.top = `${Math.random() * 100}%`;
        spark.style.animationDelay = `${Math.random() * 3}s`;
        sparksContainer.appendChild(spark);
    }
}

initSparks();

document.addEventListener('mousemove', function(e) {
    const sparks = document.querySelectorAll('.spark');
    const mouseX = e.clientX / window.innerWidth;
    const mouseY = e.clientY / window.innerHeight;
    
    sparks.forEach((spark, index) => {
        const speedX = (index % 3) * 0.02;
        const speedY = (index % 2) * 0.03;
        
        const moveX = (mouseX - 0.5) * 100 * speedX;
        const moveY = (mouseY - 0.5) * 100 * speedY;
        
        spark.style.transform = `translate(${moveX}px, ${moveY}px)`;
    });
});

window.addEventListener('load', function() {
    const title = document.querySelector('.title');
    if (title) {
        title.style.animation = 'glow 2s infinite alternate';
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const burgerCheckbox = document.getElementById('burger-checkbox');
    const magik = document.getElementById('magik');
    const head = document.getElementById('head');
    const secondHead = document.querySelector('.second_head');
    const miniHead = document.querySelector('.mini-head');
    
    function isMobile() {
        return window.innerWidth <= 768;
    }
    
    function initHeader() {
        if (isMobile()) {
            magik.removeEventListener('mouseenter', expandHeader);
            head.removeEventListener('mouseleave', collapseHeader);
            
            burgerCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    head.style.height = '320px';
                    miniHead.style.display = 'flex';
                    setTimeout(() => {
                        miniHead.style.opacity = '1';
                    }, 10);
                } else {
                    miniHead.style.opacity = '0';
                    setTimeout(() => {
                        miniHead.style.display = 'none';
                        head.style.height = '90px';
                    }, 300);
                }
            });
        } else {
            burgerCheckbox.checked = false;
            burgerCheckbox.removeEventListener('change', function() {});
            
            magik.addEventListener('mouseenter', expandHeader);
            head.addEventListener('mouseleave', collapseHeader);
        }
    }
    
    function expandHeader() {
        head.style.height = '330px';
        secondHead.style.display = 'flex';
        setTimeout(() => {
            secondHead.style.opacity = '1';
        }, 10);
    }
    
    function collapseHeader() {
        secondHead.style.opacity = '0';
        setTimeout(() => {
            secondHead.style.display = 'none';
            head.style.height = '90px';
        }, 300);
    }
    
    initHeader();
    
    window.addEventListener('resize', initHeader);
    
    if (!isMobile()) {
        const toggleMusicWidget = () => {
            document.querySelector('.text1').style.display = 'none';
            document.querySelector('.spotify-widget').style.display = 'block';
        };
        
        document.querySelector('.crest-img').addEventListener('click', toggleMusicWidget);
        document.querySelector('.click-text').addEventListener('click', toggleMusicWidget);
    }
});
document.addEventListener('DOMContentLoaded', function() {
    const spells = {
        'avada-kedavra': {
            name: "Avada Kedavra",
            effect: "–Ø—Ä–∫–æ-–∑–µ–ª—ë–Ω–∞—è –≤—Å–ø—ã—à–∫–∞ —Å–≤–µ—Ç–∞, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏–≤–∞—é—â–∞—è –∂–µ—Ä—Ç–≤—É. –û–¥–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ù–µ–ø—Ä–æ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
            type: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            difficulty: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è",
            incantation: "–ê–≤–∞–¥–∞ –ö–µ–¥–∞–≤—Ä–∞",
            history: "–û–¥–Ω–æ –∏–∑ –¥—Ä–µ–≤–Ω–µ–π—à–∏—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞–∫ '–£–±–∏–≤–∞—é—â–µ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ'. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –º–∞–≥–∏–∏.",
            color: "#2a9d8f",
            textEffect: "AVADA KEDAVRA",
            category: "dark"
        },
        'expelliarmus': {
            name: "Expelliarmus",
            effect: "–ö—Ä–∞—Å–Ω–∞—è –≤—Å–ø—ã—à–∫–∞, –≤—ã–±–∏–≤–∞—é—â–∞—è –æ—Ä—É–∂–∏–µ –∏–ª–∏ –ø–∞–ª–æ—á–∫—É –∏–∑ —Ä—É–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞–∑–∞–¥.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–≠–∫—Å–ø–µ–ª–ª–∏–∞—Ä–º—É—Å",
            history: "–®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤ –±–∏—Ç–≤–∞—Ö —Å –¢—ë–º–Ω—ã–º –õ–æ—Ä–¥–æ–º. –ü—Ä–æ—Å—Ç–æ–µ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ.",
            color: "#e63946",
            textEffect: "EXPELLIARMUS",
            category: "defense"
        },
        'expecto-patronum': {
            name: "Expecto Patronum",
            effect: "–°–æ–∑–¥–∞—ë—Ç —Å–µ—Ä–µ–±—Ä–∏—Å—Ç–æ–≥–æ –ü–∞—Ç—Ä–æ–Ω—É—Å–∞ - –∑–∞—â–∏—Ç–Ω–æ–µ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –æ—Ç–≥–æ–Ω—è—é—â–µ–µ –¥–µ–º–µ–Ω—Ç–æ—Ä–æ–≤.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–≠–∫—Å–ø–µ–∫—Ç–æ –ü–∞—Ç—Ä–æ–Ω—É–º",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –û—Ä–¥–µ–Ω–æ–º –§–µ–Ω–∏–∫—Å–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–µ–º–µ–Ω—Ç–æ—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
            color: "#a8dadc",
            textEffect: "EXPECTO PATRONUM",
            category: "defense"
        },
        'wingardium-leviosa': {
            name: "Wingardium Leviosa",
            effect: "–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –ª–µ–≤–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–æ–∑–¥—É—Ö–µ. –ß–µ–º —Å–∏–ª—å–Ω–µ–µ –º–∞–≥, —Ç–µ–º —Ç—è–∂–µ–ª–µ–µ –æ–±—ä–µ–∫—Ç—ã –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–ù–∞—á–∞–ª—å–Ω–∞—è",
            incantation: "–í–∏–Ω–≥–∞—Ä–¥–∏—É–º –õ–µ–≤–∏–æ—Å–∞",
            history: "–û–¥–Ω–æ –∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∏–∑—É—á–∞–µ–º—ã—Ö –≤ –•–æ–≥–≤–∞—Ä—Ç—Å–µ. –í–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ.",
            color: "#f4a261",
            textEffect: "WINGARDIUM LEVIOSA",
            category: "utility"
        },
        'lumos': {
            name: "Lumos",
            effect: "–ó–∞–∂–∏–≥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π —Å–≤–µ—Ç –Ω–∞ –∫–æ–Ω—á–∏–∫–µ –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏, –ø–æ–¥–æ–±–Ω–æ —Ñ–æ–Ω–∞—Ä–∏–∫—É.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–ü—Ä–æ—Å—Ç–∞—è",
            incantation: "–õ—é–º–æ—Å",
            history: "–û–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.",
            color: "#ffd166",
            textEffect: "LUMOS",
            category: "utility"
        },
        'nox': {
            name: "Nox",
            effect: "–ì–∞—Å–∏—Ç —Å–≤–µ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º –õ—é–º–æ—Å.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–ü—Ä–æ—Å—Ç–∞—è",
            incantation: "–ù–æ–∫—Å",
            history: "–°–æ–∑–¥–∞–Ω–æ –∫–∞–∫ –ø–∞—Ä–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫ –õ—é–º–æ—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.",
            color: "#3a5a40",
            textEffect: "NOX",
            category: "utility"
        },
        'alohomora': {
            name: "Alohomora",
            effect: "–û—Ç–ø–∏—Ä–∞–µ—Ç –∑–∞–º–∫–∏ –∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞—â—ë–ª–∫–∏. –ù–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –∑–∞–º–∫–∏.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–ê–ª–æ—Ö–æ–º–æ—Ä–∞",
            history: "–ü–æ–ø—É–ª—è—Ä–Ω–æ —Å—Ä–µ–¥–∏ –º–∞–≥–æ–≤-–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π.",
            color: "#588157",
            textEffect: "ALOHOMORA",
            category: "utility"
        },
        'accio': {
            name: "Accio",
            effect: "–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—é. –ß–µ–º –¥–∞–ª—å—à–µ –æ–±—ä–µ–∫—Ç, —Ç–µ–º –±–æ–ª—å—à–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–ê–∫—Ü–∏–æ",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º. –¢—Ä–µ–±—É–µ—Ç —á—ë—Ç–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.",
            color: "#3d405b",
            textEffect: "ACCIO",
            category: "utility"
        },
        'reparo': {
            name: "Reparo",
            effect: "–ß–∏–Ω–∏—Ç –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –º–∞–≥–∞.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–†–µ–ø–∞—Ä–æ",
            history: "–®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—ã—Ç—É –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –≤–µ—â–µ–π.",
            color: "#81b29a",
            textEffect: "REPARO",
            category: "utility"
        },
        'protego': {
            name: "Protego",
            effect: "–°–æ–∑–¥–∞—ë—Ç –∑–∞—â–∏—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–ü—Ä–æ—Ç–µ–≥–æ",
            history: "–û—Å–Ω–æ–≤–Ω–æ–µ –∑–∞—â–∏—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º–æ–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å–µ.",
            color: "#457b9d",
            textEffect: "PROTEGO",
            category: "defense"
        },
        'sectumsempra': {
            name: "Sectumsempra",
            effect: "–ù–∞–Ω–æ—Å–∏—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø–æ—Ä–µ–∑—ã –Ω–∞ —Ç–µ–ª–µ –∂–µ—Ä—Ç–≤—ã, –≤—ã–∑—ã–≤–∞—è —Å–∏–ª—å–Ω–æ–µ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ. ",
            type: "–ê—Ç–∞–∫—É—é—â–µ–µ",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–°–µ–∫—Ç—É–º—Å–µ–º–ø—Ä–∞",
            history: "–°–æ–∑–¥–∞–Ω–æ –°–µ–≤–µ—Ä—É—Å–æ–º –°–Ω–µ–π–ø–æ–º –≤ —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã.",
            color: "#d62828",
            textEffect: "SECTUMSEMPRA",
            category: "attack"
        },
        'imperio': {
            name: "Imperio",
            effect: "–î–∞—ë—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∂–µ—Ä—Ç–≤—ã. –û–¥–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ù–µ–ø—Ä–æ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
            type: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            difficulty: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è",
            incantation: "–ò–º–ø–µ—Ä–∏–æ",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –ü–æ–∂–∏—Ä–∞—Ç–µ–ª—è–º–∏ —Å–º–µ—Ä—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∂–µ—Ä—Ç–≤–∞–º–∏.",
            color: "#7209b7",
            textEffect: "IMPERIO",
            category: "dark"
        },
        'crucio': {
            name: "Crucio",
            effect: "–ü—Ä–∏—á–∏–Ω—è–µ—Ç –Ω–µ–≤—ã–Ω–æ—Å–∏–º—É—é –±–æ–ª—å –∂–µ—Ä—Ç–≤–µ. –û–¥–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ù–µ–ø—Ä–æ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
            type: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            difficulty: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è",
            incantation: "–ö—Ä—É—Ü–∏–æ",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –∫–∞–∫ –æ—Ä—É–¥–∏–µ –ø—ã—Ç–æ–∫ –¢—ë–º–Ω—ã–º–∏ –º–∞–≥–∞–º–∏.",
            color: "#b5179e",
            textEffect: "CRUCIO",
            category: "dark"
        },
        'riddikulus': {
            name: "Riddikulus",
            effect: "–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –±–æ–≥–≥–∞—Ä—Ç–∞ (—Å—É—â–µ—Å—Ç–≤–æ, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –æ–±–ª–∏–∫ —Ö—É–¥—à–µ–≥–æ —Å—Ç—Ä–∞—Ö–∞ —á–µ–ª–æ–≤–µ–∫–∞) –≤ —Å–º–µ—à–Ω—É—é —Ñ–æ—Ä–º—É.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–†–∏–¥–∏–∫—É–ª—É—Å",
            history: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ –±–æ–≥–≥–∞—Ä—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç —Å–∏–ª—ã –≤–æ–ª–∏.",
            color: "#ff9f1c",
            textEffect: "RIDDIKULUS",
            category: "defense"
        },
        'aguamenti': {
            name: "Aguamenti",
            effect: "–°–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–æ–∫ –≤–æ–¥—ã –∏–∑ –∫–æ–Ω—á–∏–∫–∞ –ø–∞–ª–æ—á–∫–∏. –°–∏–ª–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞–≥–∞.",
            type: "–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–ê–≥—É–∞–º–µ–Ω—Ç–∏",
            history: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç—É—à–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥—ã –≤ –ø—É—Å—Ç—ã–Ω–µ.",
            color: "#4cc9f0",
            textEffect: "AGUAMENTI",
            category: "utility"
        },
        'episkey': {
            name: "Episkey",
            effect: "–õ–µ—á–∏—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–≤–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–æ—Ä–µ–∑—ã, —Å–∏–Ω—è–∫–∏ –∏–ª–∏ —Å–ª–æ–º–∞–Ω–Ω—ã–µ –Ω–æ—Å—ã.",
            type: "–ò—Å—Ü–µ–ª—è—é—â–µ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–≠–ø–∏—Å–∫–µ–∏",
            history: "–ë–∞–∑–æ–≤–æ–µ –ª–µ—á–µ–±–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º–æ–µ –Ω–∞ –∫—É—Ä—Å–∞—Ö –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏.",
            color: "#38b000",
            textEffect: "EPISKEY",
            category: "healing"
        },
        'legilimens': {
            name: "Legilimens",
            effect: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–Ω–∏–∫–∞—Ç—å –≤ –º—ã—Å–ª–∏ –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            type: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–õ–µ–≥–∏–ª–∏–º–µ–Ω—Å",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –¥–ª—è –¥–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            color: "#3a0ca3",
            textEffect: "LEGILIMENS",
            category: "dark"
        },
        'occlumency': {
            name: "Occlumency",
            effect: "–ó–∞—â–∏—â–∞–µ—Ç —Ä–∞–∑—É–º –æ—Ç –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –õ–µ–≥–∏–ª–∏–º–µ–Ω—Å. –¢—Ä–µ–±—É–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —É–º–∞.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–û–∫–∫–ª—é–º–µ–Ω—Ü–∏—è",
            history: "–†–µ–¥–∫–æ–µ —É–º–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–º –≤–ª–∞–¥–µ—é—Ç –Ω–µ–º–Ω–æ–≥–∏–µ –º–∞–≥–∏.",
            color: "#4361ee",
            textEffect: "OCCLUMENCY",
            category: "defense"
        },
        'morsmordre': {
            name: "Morsmordre",
            effect: "–°–æ–∑–¥–∞—ë—Ç –¢—ë–º–Ω—É—é –º–µ—Ç–∫—É (—Å–∏–º–≤–æ–ª –ß–µ—Ä–µ–ø–∞ —Å–æ –ó–º–µ—ë–π) –≤ –Ω–µ–±–µ.",
            type: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            difficulty: "–°–ª–æ–∂–Ω–∞—è",
            incantation: "–ú–æ—Ä—Å–º–æ—Ä–¥—Ä–µ",
            history: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –ü–æ–∂–∏—Ä–∞—Ç–µ–ª—è–º–∏ —Å–º–µ—Ä—Ç–∏ –¥–ª—è —É—Å—Ç—Ä–∞—à–µ–Ω–∏—è.",
            color: "#480ca8",
            textEffect: "MORSMORDRE",
            category: "dark"
        },
        'finite-incantatem': {
            name: "Finite Incantatem",
            effect: "–ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –æ—Å–ª–∞–±–ª—è–µ—Ç –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç.",
            type: "–ó–∞—â–∏—Ç–Ω–æ–µ",
            difficulty: "–°—Ä–µ–¥–Ω—è—è",
            incantation: "–§–∏–Ω–∏—Ç–µ –ò–Ω–∫–∞–Ω—Ç–∞—Ç–µ–º",
            history: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.",
            color: "#f72585",
            textEffect: "FINITE INCANTATEM",
            category: "defense"
        }
    };

    const wand = document.getElementById('wand');
    const castBtn = document.getElementById('cast-spell-btn');
    const spellDisplay = document.getElementById('spell-display');
    const spellName = document.querySelector('.spell-name');
    const spellEffect = document.querySelector('.spell-effect');
    const spellType = document.getElementById('spell-type');
    const spellDifficulty = document.getElementById('spell-difficulty');
    const spellIncantation = document.getElementById('spell-incantation');
    const spellHistory = document.getElementById('spell-history');
    const spellCircle = document.getElementById('spell-circle');
    const spellItems = document.querySelectorAll('.spells-list li');
    const spellSearch = document.getElementById('spell-search');
    const spellTypeFilter = document.getElementById('spell-type-filter');
    const particlesContainer = document.querySelector('.spell-particles');
    const textEffectContainer = document.querySelector('.spell-text-effect');

    function castSpell(spellKey) {
        const spell = spells[spellKey];
        if (!spell) return;

        resetSpellEffects();
        spellName.textContent = spell.name;
        spellEffect.textContent = spell.effect;
        spellType.textContent = spell.type;
        spellDifficulty.textContent = spell.difficulty;
        spellIncantation.textContent = spell.incantation;
        spellHistory.textContent = spell.history;
        spellDisplay.className = 'spell-result';
        spellDisplay.classList.add(`spell-${spell.category}`);
        
        spellCircle.style.background = `radial-gradient(circle, ${spell.color} 0%, transparent 70%)`;

        animateSpellCast(spell);
    }

    function resetSpellEffects() {
        spellCircle.style.opacity = '0';
        wand.classList.remove('wand-active');
        particlesContainer.innerHTML = '';
        textEffectContainer.innerHTML = '';
        spellCircle.style.animation = '';
        textEffectContainer.style.animation = '';
    }

    function animateSpellCast(spell) {
        setTimeout(() => {
            wand.classList.add('wand-active');
            
            spellCircle.style.opacity = '0.6';
            spellCircle.style.animation = 'spellCircle 1.5s ease-out';
            
            if (spell.textEffect) {
                textEffectContainer.textContent = spell.textEffect;
                textEffectContainer.style.color = spell.color;
                textEffectContainer.style.opacity = '1';
                textEffectContainer.style.animation = 'textAppear 1.5s ease-out';
            }
            
            createParticles(spell.color);
            
            setTimeout(() => {
                spellCircle.style.opacity = '0';
                spellCircle.style.animation = '';
                textEffectContainer.style.opacity = '0';
                textEffectContainer.style.animation = '';
            }, 1500);
        }, 50);
    }

    function createParticles(color) {
        particlesContainer.innerHTML = '';
        
        for (let i = 0; i < 30; i++) {
            const particle = document.createElement('div');
            particle.className = 'spell-particle';
            
            const size = Math.random() * 10 + 3;
            const duration = 1000 + Math.random() * 1000;
            const delay = Math.random() * 500;
            
            Object.assign(particle.style, {
                width: `${size}px`,
                height: `${size}px`,
                backgroundColor: color,
                left: `${50 + (Math.random() - 0.5) * 40}%`,
                top: `${50 + (Math.random() - 0.5) * 40}%`,
                opacity: '0',
                boxShadow: `0 0 ${Math.random() * 15 + 5}px ${color}`,
                zIndex: '5'
            });
            
            const animation = particle.animate([
                { 
                    transform: 'translate(0, 0) scale(1)', 
                    opacity: 0.8 
                },
                { 
                    transform: `translate(${(Math.random() - 0.5) * 300}px, ${(Math.random() - 0.5) * 300}px) scale(0)`, 
                    opacity: 0 
                }
            ], {
                duration: duration,
                delay: delay
            });
            
            particlesContainer.appendChild(particle);
            
            animation.onfinish = () => particle.remove();
        }
    }

    if (castBtn) {
        castBtn.addEventListener('click', function() {
            const spellKeys = Object.keys(spells);
            const randomKey = spellKeys[Math.floor(Math.random() * spellKeys.length)];
            castSpell(randomKey);
        });
    }

    spellItems.forEach(item => {
        item.addEventListener('click', function() {
            const spellKey = this.getAttribute('data-spell');
            castSpell(spellKey);

            spellItems.forEach(i => i.classList.remove('selected'));
            this.classList.add('selected');
        });
    });

    if (spellSearch) {
        spellSearch.addEventListener('input', function() {
            filterSpells();
        });
    }
    
    if (spellTypeFilter) {
        spellTypeFilter.addEventListener('change', function() {
            filterSpells();
        });
    }
    
    function filterSpells() {
        const searchTerm = spellSearch.value.toLowerCase();
        const selectedType = spellTypeFilter.value;
        
        spellItems.forEach(item => {
            const spellKey = item.getAttribute('data-spell');
            const spell = spells[spellKey];
            const spellText = item.textContent.toLowerCase();
            const matchesSearch = spellText.includes(searchTerm);
            const matchesType = selectedType === 'all' || spell.category === selectedType;
            
            item.style.display = matchesSearch && matchesType ? 'grid' : 'none';
        });
    }
    const initialSpellKeys = Object.keys(spells);
    const initialKey = initialSpellKeys[Math.floor(Math.random() * initialSpellKeys.length)];
    castSpell(initialKey);
});
document.addEventListener('DOMContentLoaded', function() {
    const houses = {
        'gryffindor': {
            name: '–ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä',
            traits: ['–•—Ä–∞–±—Ä–æ—Å—Ç—å', '–ß–µ—Å—Ç—å', '–î–æ–±–ª–µ—Å—Ç—å'],
            description: '–ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä —Ü–µ–Ω–∏—Ç —Ö—Ä–∞–±—Ä–æ—Å—Ç—å, –æ—Ç–≤–∞–≥—É, —Ä–µ—à–∏–º–æ—Å—Ç—å –∏ —Ä—ã—Ü–∞—Ä—Å—Ç–≤–æ. –û—Å–Ω–æ–≤–∞–Ω –ì–æ–¥—Ä–∏–∫–æ–º –ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä–æ–º. –¢–∞–ª–∏—Å–º–∞–Ω - –ª–µ–≤, —Ü–≤–µ—Ç–∞ - –∞–ª—ã–π –∏ –∑–æ–ª–æ—Ç–æ–π. –ì–æ—Å—Ç–∏–Ω–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä—Å–∫–æ–π –±–∞—à–Ω–µ, –∞ –≤—Ö–æ–¥ –æ—Ö—Ä–∞–Ω—è–µ—Ç –ñ–∏—Ä–Ω–∞—è –î–∞–º–∞.',
            famous: ['–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', '–ì–µ—Ä–º–∏–æ–Ω–∞ –ì—Ä–µ–π–Ω–¥–∂–µ—Ä', '–†–æ–Ω –£–∏–∑–ª–∏', '–ê–ª—å–±—É—Å –î–∞–º–±–ª–¥–æ—Ä'],
            banner: 'https://klev.club/uploads/posts/2023-11/1698878527_klev-club-p-arti-gerb-garri-pottera-griffindor-17.jpg'
        },
        'slytherin': {
            name: '–°–ª–∏–∑–µ—Ä–∏–Ω',
            traits: ['–ê–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å', '–•–∏—Ç—Ä–æ—Å—Ç—å', '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
            description: '–°–ª–∏–∑–µ—Ä–∏–Ω —Ü–µ–Ω–∏—Ç –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å, —Ö–∏—Ç—Ä–æ—Å—Ç—å, –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≤–µ–ª–∏—á–∏—é. –û—Å–Ω–æ–≤–∞–Ω –°–∞–ª–∞–∑–∞—Ä–æ–º –°–ª–∏–∑–µ—Ä–∏–Ω–æ–º. –¢–∞–ª–∏—Å–º–∞–Ω - –∑–º–µ—è, —Ü–≤–µ—Ç–∞ - –∑–µ–ª—ë–Ω—ã–π –∏ —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π. –ì–æ—Å—Ç–∏–Ω–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö –ø–æ–¥ –æ–∑–µ—Ä–æ–º.',
            famous: ['–°–µ–≤–µ—Ä—É—Å –°–Ω–µ–π–ø', '–î—Ä–∞–∫–æ –ú–∞–ª—Ñ–æ–π', '–¢–æ–º –†–µ–¥–¥–ª (–í–æ–ª–¥–µ–º–æ—Ä—Ç)', '–ë–µ–ª–ª–∞—Ç—Ä–∏—Å–∞ –õ–µ—Å—Ç—Ä–µ–π–Ω–¥–∂'],
            banner: 'https://png.klev.club/uploads/posts/2024-05/png-klev-club-grvc-p-gerb-slizerin-png-1.png'
        },
        'ravenclaw': {
            name: '–ö–æ–≥—Ç–µ–≤—Ä–∞–Ω',
            traits: ['–£–º', '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
            description: '–ö–æ–≥—Ç–µ–≤—Ä–∞–Ω —Ü–µ–Ω–∏—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –º—É–¥—Ä–æ—Å—Ç—å, –æ—Å—Ç—Ä–æ—É–º–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ. –û—Å–Ω–æ–≤–∞–Ω –ö–∞–Ω–¥–∏–¥–æ–π –ö–æ–≥—Ç–µ–≤—Ä–∞–Ω. –¢–∞–ª–∏—Å–º–∞–Ω - –æ—Ä—ë–ª, —Ü–≤–µ—Ç–∞ - —Å–∏–Ω–∏–π –∏ –±—Ä–æ–Ω–∑–æ–≤—ã–π. –ì–æ—Å—Ç–∏–Ω–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞—à–Ω–µ –Ω–∞ –∑–∞–ø–∞–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∑–∞–º–∫–∞.',
            famous: ['–õ—É–Ω–∞ –õ–∞–≤–≥—É–¥', '–§–∏–ª–∏—É—Å –§–ª–∏—Ç–≤–∏–∫', '–ì–∏–ª–¥–µ—Ä–æ–π –õ–æ–∫—Ö–∞—Ä—Ç', '–ß–∂–æ—É –ß–∞–Ω–≥'],
            banner: 'https://pm1.aminoapps.com/7167/89dcde1b6102561c03c487709408a574ff8b76cfr1-399-512v2_00.jpg'
        },
        'hufflepuff': {
            name: '–ü—É—Ñ—Ñ–µ–Ω–¥—É–π',
            traits: ['–¢—Ä—É–¥–æ–ª—é–±–∏–µ', '–í–µ—Ä–Ω–æ—Å—Ç—å', '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å'],
            description: '–ü—É—Ñ—Ñ–µ–Ω–¥—É–π —Ü–µ–Ω–∏—Ç —Ç—Ä—É–¥–æ–ª—é–±–∏–µ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –≤–µ—Ä–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å. –û—Å–Ω–æ–≤–∞–Ω –ü–µ–Ω–µ–ª–æ–ø–æ–π –ü—É—Ñ—Ñ–µ–Ω–¥—É–π. –¢–∞–ª–∏—Å–º–∞–Ω - –±–∞—Ä—Å—É–∫, —Ü–≤–µ—Ç–∞ - –∂—ë–ª—Ç—ã–π –∏ —á—ë—Ä–Ω—ã–π. –ì–æ—Å—Ç–∏–Ω–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –∫—É—Ö–Ω—è–º–∏.',
            famous: ['–°–µ–¥—Ä–∏–∫ –î–∏–≥–≥–æ—Ä–∏', '–ù–∏–º—Ñ–∞–¥–æ—Ä–∞ –¢–æ–Ω–∫—Å', '–ü–æ–º–æ–Ω–∞ –°—Ç–µ–±–ª—å', '–ù—å—é—Ç –°–∞–ª–∞–º–∞–Ω–¥–µ—Ä'],
            banner: 'https://abrakadabra.fun/uploads/posts/2021-12/1640199343_1-abrakadabra-fun-p-gerb-puffenduya-iz-garri-pottera-1.png'
        }
    };

    const houseOptions = document.querySelectorAll('.house-option');
    const houseName = document.getElementById('house-name');
    const houseBannerImg = document.getElementById('house-banner-img');
    const houseDescription = document.getElementById('house-description');
    const famousStudents = document.getElementById('famous-students');
    const sortingBtn = document.getElementById('sorting-btn');
    const traits = [
        document.getElementById('trait-1'),
        document.getElementById('trait-2'),
        document.getElementById('trait-3')
    ];

    function updateHouseInfo(house) {
        houseName.textContent = house.name;
        houseBannerImg.src = house.banner;
        houseDescription.textContent = house.description;
        
        traits.forEach((trait, index) => {
            trait.textContent = house.traits[index];
        });
        
        famousStudents.innerHTML = '';
        house.famous.forEach(student => {
            const li = document.createElement('li');
            li.textContent = student;
            famousStudents.appendChild(li);
        });
        
        document.querySelectorAll('.house-option').forEach(option => {
            option.classList.remove('selected');
        });
        document.querySelector(`.house-option[data-house="${house.id || house.name.toLowerCase()}"]`)?.classList.add('selected');
    }

    houseOptions.forEach(option => {
        option.addEventListener('click', function() {
            const house = this.getAttribute('data-house');
            updateHouseInfo(houses[house]);
        });
    });

    sortingBtn.addEventListener('click', function() {
        const houseKeys = Object.keys(houses);
        const randomHouse = houseKeys[Math.floor(Math.random() * houseKeys.length)];
        
        this.textContent = "–î—É–º–∞—é...";

        setTimeout(() => {
            updateHouseInfo(houses[randomHouse]);
            this.textContent = "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑!";
        }, 300); 
    });
    updateHouseInfo(houses['gryffindor']);
});